using ModEnabler.Resource.DataObjects;
using System.Collections.Generic;
using UnityEngine;

namespace ModEnabler.Resource
{
    public static partial class ResourceManager
    {
        /// <summary>
        /// Needs to reference a spritesheet generated by TexturePacker on the Json(Hash) mode
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static Dictionary<string, Sprite> LoadSpriteSheet(string name)
        {
            CacheEntry cache = ResourceCache.GetEntry<Dictionary<string, Sprite>>(name);
            if (cache == null)
            {
                Mod mod;
                string dir = ModsManager.settings.texturesDirectory;
                if (!dir.EndsWith("/") && !string.IsNullOrEmpty(dir))
                    dir += "/";

                byte[] bytes = ModsManager.GetFileContents(dir + name, out mod);
                if (bytes == null || bytes.Length == 0)
                {
                    Debug.LogError("SpriteSheet '" + dir + name + "' does not exist or is not loaded");
                    return null;
                }

                string json = BytesToString(bytes);
                TextureSheetData data = ModsManager.serializer.Deserialize<TextureSheetData>(json);

                if (data.frames == null || data.frames.Length == 0)
                {
                    Debug.LogErrorFormat("TextureSheet {0} is not of the correct format or contains no textures.", name);
                    return null;
                }

                Dictionary<string, Sprite> dict = new Dictionary<string, Sprite>();
                Texture2D texture = LoadTexture(data.meta.image, false);

                for (int i = 0; i < data.frames.Length; i++)
                {
                    TextureSheetData.FrameData currFame = data.frames[i];
                    CacheEntry spriteCache = ResourceCache.GetEntry<Sprite>(currFame.filename);
                    if (spriteCache == null)
                    {
                        Sprite sprite = Sprite.Create(texture, currFame.frame.ToUnity(data.meta.size.h), currFame.pivot);
                        sprite.name = currFame.filename;
                        ResourceCache.Add(currFame.filename, sprite, mod);
                        dict.Add(currFame.filename, sprite);
                    }
                    else
                    {
                        dict.Add(currFame.filename, spriteCache.GetValue<Sprite>());
                    }
                }
                ResourceCache.Add(name, dict, mod);
                return dict;
            }
            else
            {
                return cache.GetValue<Dictionary<string, Sprite>>();
            }
        }

        public static Sprite GetSpriteFromTextureSheet(string sheetName, string spriteName)
        {
            Dictionary<string, Sprite> sprites = LoadSpriteSheet(sheetName);
            if (sprites.ContainsKey(spriteName))
                return sprites[spriteName];
            else
                return null;
        }
    }
}